// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/application/application.proto

/*
Package application is a generated protocol buffer package.

Application Service

Application Service API performs CRUD actions against application resources

It is generated from these files:
	server/application/application.proto

It has these top-level messages:
	ApplicationQuery
	ApplicationResponse
*/
package application

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import k8s_io_api_core_v1 "k8s.io/api/core/v1"
import github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1 "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ApplicationQuery is a query for application resources
type ApplicationQuery struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ApplicationQuery) Reset()                    { *m = ApplicationQuery{} }
func (m *ApplicationQuery) String() string            { return proto.CompactTextString(m) }
func (*ApplicationQuery) ProtoMessage()               {}
func (*ApplicationQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApplicationQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ApplicationResponse struct {
}

func (m *ApplicationResponse) Reset()                    { *m = ApplicationResponse{} }
func (m *ApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*ApplicationResponse) ProtoMessage()               {}
func (*ApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ApplicationQuery)(nil), "application.ApplicationQuery")
	proto.RegisterType((*ApplicationResponse)(nil), "application.ApplicationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApplicationService service

type ApplicationServiceClient interface {
	// List returns list of applications
	List(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ApplicationList, error)
	// Create creates a application
	Create(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error)
	// Get returns a application by name
	Get(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error)
	// Update updates a application
	Update(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error)
	// Delete updates a application
	Delete(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*ApplicationResponse, error)
	// ListPods returns pods in a application
	ListPods(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error)
}

type applicationServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationServiceClient(cc *grpc.ClientConn) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) List(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ApplicationList, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ApplicationList)
	err := grpc.Invoke(ctx, "/application.ApplicationService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Create(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application)
	err := grpc.Invoke(ctx, "/application.ApplicationService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Get(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application)
	err := grpc.Invoke(ctx, "/application.ApplicationService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Update(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application)
	err := grpc.Invoke(ctx, "/application.ApplicationService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Delete(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*ApplicationResponse, error) {
	out := new(ApplicationResponse)
	err := grpc.Invoke(ctx, "/application.ApplicationService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ListPods(ctx context.Context, in *ApplicationQuery, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error) {
	out := new(k8s_io_api_core_v1.PodList)
	err := grpc.Invoke(ctx, "/application.ApplicationService/ListPods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationService service

type ApplicationServiceServer interface {
	// List returns list of applications
	List(context.Context, *ApplicationQuery) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ApplicationList, error)
	// Create creates a application
	Create(context.Context, *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error)
	// Get returns a application by name
	Get(context.Context, *ApplicationQuery) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error)
	// Update updates a application
	Update(context.Context, *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application, error)
	// Delete updates a application
	Delete(context.Context, *ApplicationQuery) (*ApplicationResponse, error)
	// ListPods returns pods in a application
	ListPods(context.Context, *ApplicationQuery) (*k8s_io_api_core_v1.PodList, error)
}

func RegisterApplicationServiceServer(s *grpc.Server, srv ApplicationServiceServer) {
	s.RegisterService(&_ApplicationService_serviceDesc, srv)
}

func _ApplicationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).List(ctx, req.(*ApplicationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Create(ctx, req.(*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Get(ctx, req.(*ApplicationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Update(ctx, req.(*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Delete(ctx, req.(*ApplicationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ListPods(ctx, req.(*ApplicationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "application.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ApplicationService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ApplicationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationService_Delete_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _ApplicationService_ListPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/application/application.proto",
}

func init() { proto.RegisterFile("server/application/application.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0xaa, 0x13, 0x31,
	0x14, 0x66, 0xb4, 0x8c, 0x1a, 0x37, 0x12, 0xab, 0xe8, 0xb4, 0xc5, 0x32, 0x16, 0xa9, 0x05, 0x13,
	0x47, 0x37, 0xe2, 0xce, 0x1f, 0x14, 0xc5, 0x45, 0xad, 0xb8, 0x71, 0x23, 0xe9, 0xe4, 0x90, 0x8e,
	0x9d, 0x4e, 0x42, 0x92, 0x0e, 0x88, 0xb8, 0xf1, 0x05, 0x44, 0x7c, 0x05, 0x5f, 0xc2, 0x47, 0xb8,
	0xeb, 0xfb, 0x0a, 0xf7, 0x41, 0x2e, 0x49, 0x3b, 0x74, 0x7a, 0xdb, 0xdb, 0x6e, 0xba, 0xb8, 0xbb,
	0x43, 0xce, 0x99, 0xf3, 0xfd, 0x70, 0xe6, 0x43, 0x3d, 0x03, 0xba, 0x04, 0x4d, 0x99, 0x52, 0x79,
	0x96, 0x32, 0x9b, 0xc9, 0xa2, 0x5e, 0x13, 0xa5, 0xa5, 0x95, 0xf8, 0x7a, 0xed, 0x29, 0x6a, 0x0a,
	0x29, 0xa4, 0x7f, 0xa7, 0xae, 0x5a, 0x8c, 0x44, 0x6d, 0x21, 0xa5, 0xc8, 0x81, 0x32, 0x95, 0x51,
	0x56, 0x14, 0xd2, 0xfa, 0x61, 0xb3, 0xec, 0xc6, 0xd3, 0x67, 0x86, 0x64, 0xd2, 0x77, 0x53, 0xa9,
	0x81, 0x96, 0x09, 0x15, 0x50, 0x80, 0x66, 0x16, 0xf8, 0x72, 0xe6, 0x9d, 0xc8, 0xec, 0x64, 0x3e,
	0x26, 0xa9, 0x9c, 0x51, 0xa6, 0x3d, 0xc4, 0x37, 0x5f, 0x3c, 0x4a, 0x39, 0x55, 0x53, 0xe1, 0x3e,
	0x36, 0x6b, 0x44, 0xcb, 0x84, 0xe5, 0x6a, 0xc2, 0x36, 0x56, 0xc5, 0x0f, 0xd0, 0x8d, 0x17, 0xab,
	0xb9, 0x8f, 0x73, 0xd0, 0xdf, 0x31, 0x46, 0x8d, 0x82, 0xcd, 0xe0, 0x4e, 0xd0, 0x0d, 0xfa, 0xd7,
	0x46, 0xbe, 0x8e, 0x6f, 0xa1, 0x9b, 0xb5, 0xb9, 0x11, 0x18, 0x25, 0x0b, 0x03, 0x4f, 0xfe, 0x5d,
	0x41, 0xb8, 0xf6, 0xfe, 0x09, 0x74, 0x99, 0xa5, 0x80, 0x7f, 0x07, 0xa8, 0xf1, 0x21, 0x33, 0x16,
	0x77, 0x48, 0xdd, 0xa2, 0xb3, 0x48, 0xd1, 0x7b, 0xb2, 0x52, 0x42, 0x2a, 0x25, 0xbe, 0xf8, 0x9a,
	0x72, 0xa2, 0xa6, 0x82, 0x38, 0x25, 0x6b, 0x3b, 0x2a, 0x25, 0xf5, 0x65, 0x0e, 0x2a, 0x6e, 0xff,
	0x3a, 0x3e, 0xf9, 0x7b, 0xe9, 0x36, 0x6e, 0x7a, 0xeb, 0xca, 0xa4, 0xae, 0xdf, 0xe0, 0xff, 0x01,
	0x0a, 0x5f, 0x69, 0x60, 0x16, 0xf0, 0x9b, 0xc3, 0x80, 0x46, 0x07, 0xda, 0x13, 0xdf, 0xf3, 0xc4,
	0xef, 0xc6, 0x5b, 0x89, 0x3f, 0x0f, 0x06, 0xf8, 0x4f, 0x80, 0x2e, 0xbf, 0x85, 0xbd, 0x66, 0x1e,
	0x8a, 0xcf, 0x7d, 0xcf, 0xa7, 0x83, 0x5b, 0xdb, 0xf8, 0xd0, 0x1f, 0xee, 0x1c, 0x7e, 0xe2, 0xa3,
	0x00, 0x85, 0x9f, 0x15, 0xbf, 0x88, 0x7e, 0x52, 0xcf, 0xff, 0x61, 0xd4, 0xdb, 0xce, 0x7f, 0x06,
	0x96, 0x71, 0x66, 0x19, 0xf1, 0x42, 0x9c, 0xbf, 0x05, 0x0a, 0x5f, 0x43, 0x0e, 0x16, 0xf6, 0x39,
	0xdc, 0x3d, 0xaf, 0x5d, 0xfd, 0x0f, 0x95, 0x77, 0x83, 0x9d, 0xde, 0x29, 0x74, 0xd5, 0x5d, 0xec,
	0x50, 0x72, 0xb3, 0x0f, 0xb1, 0x45, 0x16, 0x71, 0xe0, 0xa4, 0x13, 0x17, 0x07, 0xa4, 0x4c, 0xc8,
	0x50, 0x72, 0x7f, 0xf1, 0x7d, 0x0f, 0x16, 0xe3, 0xee, 0x0e, 0x30, 0xaa, 0x24, 0x37, 0x2f, 0x1f,
	0x7f, 0x21, 0xbb, 0x22, 0x63, 0x33, 0xd9, 0xc6, 0xa1, 0x8f, 0x87, 0xa7, 0xa7, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3d, 0x0e, 0x72, 0x71, 0xf6, 0x04, 0x00, 0x00,
}
