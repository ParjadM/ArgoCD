// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/cluster/cluster.proto

/*
Package cluster is a generated protocol buffer package.

Cluster Service

Cluster Service API performs CRUD actions against cluster resources

It is generated from these files:
	server/cluster/cluster.proto

It has these top-level messages:
	ClusterQuery
	ClusterResponse
*/
package cluster

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import k8s_io_api_core_v1 "k8s.io/api/core/v1"
import github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1 "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ClusterQuery is a query for cluster resources
type ClusterQuery struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterQuery) Reset()                    { *m = ClusterQuery{} }
func (m *ClusterQuery) String() string            { return proto.CompactTextString(m) }
func (*ClusterQuery) ProtoMessage()               {}
func (*ClusterQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClusterQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterResponse struct {
}

func (m *ClusterResponse) Reset()                    { *m = ClusterResponse{} }
func (m *ClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterResponse) ProtoMessage()               {}
func (*ClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ClusterQuery)(nil), "cluster.ClusterQuery")
	proto.RegisterType((*ClusterResponse)(nil), "cluster.ClusterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterService service

type ClusterServiceClient interface {
	// List returns list of clusters
	List(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ClusterList, error)
	// Create creates a cluster
	Create(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error)
	// Get returns a cluster by name
	Get(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error)
	// Update updates a cluster
	Update(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error)
	// Delete updates a cluster
	Delete(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*ClusterResponse, error)
	// ListPods returns pods in a cluster
	ListPods(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) List(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ClusterList, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ClusterList)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Create(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Get(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Update(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Delete(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListPods(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error) {
	out := new(k8s_io_api_core_v1.PodList)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/ListPods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterService service

type ClusterServiceServer interface {
	// List returns list of clusters
	List(context.Context, *ClusterQuery) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ClusterList, error)
	// Create creates a cluster
	Create(context.Context, *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error)
	// Get returns a cluster by name
	Get(context.Context, *ClusterQuery) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error)
	// Update updates a cluster
	Update(context.Context, *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster, error)
	// Delete updates a cluster
	Delete(context.Context, *ClusterQuery) (*ClusterResponse, error)
	// ListPods returns pods in a cluster
	ListPods(context.Context, *ClusterQuery) (*k8s_io_api_core_v1.PodList, error)
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).List(ctx, req.(*ClusterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Create(ctx, req.(*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Get(ctx, req.(*ClusterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Update(ctx, req.(*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Delete(ctx, req.(*ClusterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListPods(ctx, req.(*ClusterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ClusterService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClusterService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClusterService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClusterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterService_Delete_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _ClusterService_ListPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/cluster/cluster.proto",
}

func init() { proto.RegisterFile("server/cluster/cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x89, 0x96, 0xa8, 0x83, 0xf8, 0x67, 0xb0, 0x58, 0xd3, 0xa2, 0x25, 0x28, 0x48, 0xd5,
	0x19, 0xa2, 0x1b, 0x71, 0xd9, 0x8a, 0x22, 0xb8, 0xa8, 0x15, 0x37, 0xdd, 0xc8, 0x34, 0x73, 0x98,
	0xc6, 0xa6, 0x99, 0x61, 0x66, 0x1a, 0x10, 0x11, 0xd1, 0x57, 0xf0, 0x39, 0x7c, 0x04, 0xd7, 0xf7,
	0x01, 0xee, 0x2b, 0xdc, 0x07, 0xb9, 0xcc, 0x34, 0xa1, 0xbd, 0x2d, 0xb9, 0x9b, 0xdb, 0xc5, 0x5d,
	0xe5, 0x64, 0x66, 0xf2, 0x7d, 0xbf, 0x7c, 0x39, 0x27, 0xa8, 0x67, 0x40, 0x97, 0xa0, 0x69, 0x9a,
	0xaf, 0x8c, 0xdd, 0x5c, 0x89, 0xd2, 0xd2, 0x4a, 0x7c, 0xad, 0xba, 0x8d, 0xee, 0x09, 0x29, 0xa4,
	0x5f, 0xa3, 0xae, 0x5a, 0x6f, 0x47, 0x3d, 0x21, 0xa5, 0xc8, 0x81, 0x32, 0x95, 0x51, 0x56, 0x14,
	0xd2, 0x32, 0x9b, 0xc9, 0xc2, 0x54, 0xbb, 0xf1, 0xe2, 0xb5, 0x21, 0x99, 0xf4, 0xbb, 0xa9, 0xd4,
	0x40, 0xcb, 0x84, 0x0a, 0x28, 0x40, 0x33, 0x0b, 0xbc, 0x3a, 0xf3, 0x41, 0x64, 0x76, 0xbe, 0x9a,
	0x91, 0x54, 0x2e, 0x29, 0xd3, 0xde, 0xe2, 0x9b, 0x2f, 0x5e, 0xa4, 0x9c, 0xaa, 0x85, 0x70, 0x0f,
	0x1b, 0xca, 0x94, 0xca, 0xb3, 0xd4, 0x8b, 0xd3, 0x32, 0x61, 0xb9, 0x9a, 0xb3, 0x3d, 0xa9, 0x38,
	0x46, 0x37, 0x47, 0x6b, 0xda, 0x4f, 0x2b, 0xd0, 0xdf, 0x31, 0x46, 0xad, 0x82, 0x2d, 0xa1, 0x13,
	0xf4, 0x83, 0xa7, 0x37, 0x26, 0xbe, 0x8e, 0xef, 0xa2, 0xdb, 0xd5, 0x99, 0x09, 0x18, 0x25, 0x0b,
	0x03, 0x2f, 0x8f, 0x42, 0x74, 0xab, 0x5a, 0xfb, 0x0c, 0xba, 0xcc, 0x52, 0xc0, 0xbf, 0x50, 0xeb,
	0x63, 0x66, 0x2c, 0x6e, 0x93, 0x3a, 0x8d, 0x6d, 0xe1, 0xe8, 0x1d, 0xd9, 0x40, 0x93, 0x1a, 0xda,
	0x17, 0x5f, 0x53, 0x4e, 0xd4, 0x42, 0x10, 0x07, 0x4d, 0xb6, 0xa0, 0x49, 0x0d, 0x5d, 0x0b, 0x39,
	0xf9, 0xb8, 0xf3, 0xe7, 0xf8, 0xe4, 0xef, 0x15, 0x8c, 0xef, 0xf8, 0x84, 0xca, 0xa4, 0xce, 0xde,
	0xe0, 0x7f, 0x01, 0x0a, 0x47, 0x1a, 0x98, 0x05, 0x3c, 0xbc, 0xb8, 0x59, 0x74, 0x00, 0x8d, 0xb8,
	0xeb, 0x61, 0xdb, 0xf1, 0x1e, 0xec, 0x9b, 0x60, 0x80, 0x7f, 0x07, 0xe8, 0xea, 0x7b, 0x68, 0x0c,
	0xec, 0x10, 0xfe, 0x8f, 0xbc, 0xff, 0x03, 0x7c, 0x7f, 0xd7, 0x9f, 0xfe, 0x70, 0x5f, 0xf6, 0x27,
	0xfe, 0x1f, 0xa0, 0xf0, 0x8b, 0xe2, 0x97, 0x29, 0xb3, 0x67, 0x9e, 0xf9, 0x49, 0xd4, 0xdf, 0x67,
	0x5e, 0x82, 0x65, 0x9c, 0x59, 0x46, 0x3c, 0xbc, 0xcb, 0x70, 0x8a, 0xc2, 0xb7, 0x90, 0x83, 0x85,
	0xa6, 0x14, 0x3b, 0xbb, 0xcb, 0x75, 0x0b, 0xd7, 0xd9, 0x0c, 0x1a, 0xb3, 0xe1, 0xe8, 0xba, 0xeb,
	0xb8, 0xb1, 0xe4, 0xa6, 0x49, 0xbd, 0x4b, 0xd6, 0xd3, 0xea, 0x5e, 0x8b, 0xb8, 0x69, 0x25, 0x65,
	0x42, 0xc6, 0x92, 0xfb, 0x4e, 0x7d, 0xec, 0x0d, 0x1e, 0xe2, 0x5e, 0x83, 0x01, 0x55, 0x92, 0x9b,
	0xe1, 0xf3, 0xe9, 0xe0, 0xbc, 0x69, 0x3e, 0xfb, 0xa3, 0x99, 0x85, 0x7e, 0x6a, 0x5f, 0x9d, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x8f, 0xcc, 0xe9, 0x6e, 0x81, 0x04, 0x00, 0x00,
}
