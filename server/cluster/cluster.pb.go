// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/cluster/cluster.proto

/*
Package cluster is a generated protocol buffer package.

Cluster Service

Cluster Service API allows

It is generated from these files:
	server/cluster/cluster.proto

It has these top-level messages:
	ClusterMessage
	ClusterListMessage
	ClusterQuery
*/
package cluster

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import core "github.com/argoproj/argo-cd/server/core"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ClusterMessage holds Kuberentes cluster information
type ClusterMessage struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Server      string `protobuf:"bytes,2,opt,name=Server" json:"Server,omitempty"`
	Certificate string `protobuf:"bytes,3,opt,name=Certificate" json:"Certificate,omitempty"`
	Token       string `protobuf:"bytes,4,opt,name=Token" json:"Token,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=Description" json:"Description,omitempty"`
}

func (m *ClusterMessage) Reset()                    { *m = ClusterMessage{} }
func (m *ClusterMessage) String() string            { return proto.CompactTextString(m) }
func (*ClusterMessage) ProtoMessage()               {}
func (*ClusterMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClusterMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterMessage) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ClusterMessage) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *ClusterMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ClusterMessage) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// ClusterListMessage holds multiple clusters
type ClusterListMessage struct {
	Items []*ClusterMessage `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ClusterListMessage) Reset()                    { *m = ClusterListMessage{} }
func (m *ClusterListMessage) String() string            { return proto.CompactTextString(m) }
func (*ClusterListMessage) ProtoMessage()               {}
func (*ClusterListMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClusterListMessage) GetItems() []*ClusterMessage {
	if m != nil {
		return m.Items
	}
	return nil
}

type ClusterQuery struct {
}

func (m *ClusterQuery) Reset()                    { *m = ClusterQuery{} }
func (m *ClusterQuery) String() string            { return proto.CompactTextString(m) }
func (*ClusterQuery) ProtoMessage()               {}
func (*ClusterQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*ClusterMessage)(nil), "cluster.ClusterMessage")
	proto.RegisterType((*ClusterListMessage)(nil), "cluster.ClusterListMessage")
	proto.RegisterType((*ClusterQuery)(nil), "cluster.ClusterQuery")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterService service

type ClusterServiceClient interface {
	// GetClusters returns list of clusters
	GetClusters(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*ClusterListMessage, error)
	// GetCluster returns a cluster by name
	GetCluster(ctx context.Context, in *core.NameMessage, opts ...grpc.CallOption) (*ClusterMessage, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) GetClusters(ctx context.Context, in *ClusterQuery, opts ...grpc.CallOption) (*ClusterListMessage, error) {
	out := new(ClusterListMessage)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/GetClusters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetCluster(ctx context.Context, in *core.NameMessage, opts ...grpc.CallOption) (*ClusterMessage, error) {
	out := new(ClusterMessage)
	err := grpc.Invoke(ctx, "/cluster.ClusterService/GetCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterService service

type ClusterServiceServer interface {
	// GetClusters returns list of clusters
	GetClusters(context.Context, *ClusterQuery) (*ClusterListMessage, error)
	// GetCluster returns a cluster by name
	GetCluster(context.Context, *core.NameMessage) (*ClusterMessage, error)
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetClusters(ctx, req.(*ClusterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.NameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetCluster(ctx, req.(*core.NameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusters",
			Handler:    _ClusterService_GetClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _ClusterService_GetCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/cluster/cluster.proto",
}

func init() { proto.RegisterFile("server/cluster/cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x26, 0xfd, 0x13, 0xb7, 0x52, 0x74, 0xd0, 0x76, 0x8d, 0x05, 0x4b, 0x4e, 0x45, 0x6c, 0x82,
	0xf5, 0x0d, 0xac, 0xe0, 0x45, 0x05, 0xab, 0x17, 0xf5, 0xb4, 0x8d, 0x63, 0x5c, 0x6d, 0xb3, 0x61,
	0x77, 0x5b, 0x10, 0xf1, 0xe2, 0x2b, 0x08, 0x3e, 0x93, 0x77, 0x5f, 0xc1, 0x07, 0x91, 0x4c, 0x12,
	0xfa, 0x03, 0x5e, 0x92, 0x9d, 0x6f, 0xf6, 0xfb, 0x98, 0xef, 0x9b, 0x65, 0x6d, 0x83, 0x7a, 0x86,
	0x3a, 0x08, 0xc7, 0x53, 0x63, 0xe7, 0x7f, 0x3f, 0xd1, 0xca, 0x2a, 0x58, 0xcb, 0x4b, 0xb7, 0x1d,
	0x29, 0x15, 0x8d, 0x31, 0x10, 0x89, 0x0c, 0x44, 0x1c, 0x2b, 0x2b, 0xac, 0x54, 0xb1, 0xc9, 0xae,
	0xb9, 0xcd, 0x42, 0x44, 0x69, 0xa4, 0x4f, 0x86, 0x7b, 0x5f, 0x0e, 0x6b, 0x0c, 0x32, 0x85, 0x0b,
	0x34, 0x46, 0x44, 0x08, 0xc0, 0x2a, 0x97, 0x62, 0x82, 0xdc, 0xe9, 0x38, 0xdd, 0xf5, 0x21, 0x9d,
	0xa1, 0xc9, 0x6a, 0xd7, 0x24, 0xc0, 0x4b, 0x84, 0xe6, 0x15, 0x74, 0x58, 0x7d, 0x80, 0xda, 0xca,
	0x47, 0x19, 0x0a, 0x8b, 0xbc, 0x4c, 0xcd, 0x45, 0x08, 0xb6, 0x59, 0xf5, 0x46, 0xbd, 0x60, 0xcc,
	0x2b, 0xd4, 0xcb, 0x8a, 0x94, 0x77, 0x8a, 0x26, 0xd4, 0x32, 0x49, 0x87, 0xe4, 0xd5, 0x8c, 0xb7,
	0x00, 0x79, 0x03, 0x06, 0xf9, 0x5c, 0xe7, 0xd2, 0xd8, 0x62, 0xb6, 0x1e, 0xab, 0x4a, 0x8b, 0x13,
	0xc3, 0x9d, 0x4e, 0xb9, 0x5b, 0xef, 0xb7, 0xfc, 0x22, 0x8c, 0x65, 0x0f, 0xc3, 0xec, 0x96, 0xd7,
	0x60, 0x1b, 0x79, 0xe3, 0x6a, 0x8a, 0xfa, 0xb5, 0xff, 0x3d, 0x77, 0x9b, 0x1a, 0x90, 0x21, 0xc2,
	0x3d, 0xab, 0x9f, 0xa1, 0xcd, 0x41, 0x03, 0x3b, 0xab, 0x8a, 0x44, 0x74, 0xf7, 0x56, 0xe1, 0x85,
	0xa1, 0x3c, 0xfe, 0xf1, 0xf3, 0xfb, 0x59, 0x02, 0xd8, 0xa4, 0xec, 0x67, 0x47, 0xc5, 0x86, 0x0c,
	0xdc, 0x32, 0x36, 0x17, 0x87, 0x2d, 0x9f, 0x82, 0x4f, 0x03, 0xcd, 0xa9, 0xee, 0x7f, 0x06, 0xbc,
	0x7d, 0xd2, 0xdc, 0x85, 0xd6, 0xaa, 0x66, 0xf0, 0x96, 0xf2, 0xdf, 0x4f, 0x0e, 0xef, 0x0e, 0x22,
	0x69, 0x9f, 0xa6, 0x23, 0x3f, 0x54, 0x93, 0x40, 0xe8, 0x48, 0x25, 0x5a, 0x3d, 0xd3, 0xa1, 0x17,
	0x3e, 0x04, 0xcb, 0x6f, 0x66, 0x54, 0xa3, 0x6d, 0x1f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x47,
	0xcc, 0x8b, 0x56, 0x4c, 0x02, 0x00, 0x00,
}
