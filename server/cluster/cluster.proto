syntax = "proto2";
option go_package = "github.com/argoproj/argo-cd/server/cluster";

// Cluster Service
//
// Cluster Service API performs CRUD actions against cluster resources 
package cluster;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "github.com/argoproj/argo-cd/server/core/core.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";

message ClusterQuery {}

// ClusterService 
service ClusterService {
	// GetClusters returns list of clusters
	rpc GetClusters(ClusterQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ClusterList) {
		option (google.api.http).get = "/api/v1/clusters";
	}

	// CreateCluster creates a cluster
	rpc CreateCluster(github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
		option (google.api.http).post = "/api/v1/clusters";
	}
	
    // GetCluster returns a cluster by name
    rpc GetCluster(core.NameMessage) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
		option (google.api.http).get = "/api/v1/clusters/{name}";
	}

	// // UpdateCluster updates a cluster
	// rpc UpdateCluster(github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
	// 	option (google.api.http).put = "/api/v1/clusters/{metadata.name}";
	// }

	// DeleteCluster updates a cluster
	rpc DeleteCluster(core.NameMessage) returns (google.protobuf.Empty) {
		option (google.api.http).delete = "/api/v1/clusters/{name}";
	}
}
