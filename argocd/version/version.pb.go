// Code generated by protoc-gen-go. DO NOT EDIT.
// source: version.proto

/*
Package version is a generated protocol buffer package.

Version Service

Version Service API returns the version of the API server.

It is generated from these files:
	version.proto

It has these top-level messages:
	VersionMessage
*/
package version

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// VersionMessage represents version of the ArgoCD API server
type VersionMessage struct {
	Version      string `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	BuildDate    string `protobuf:"bytes,2,opt,name=BuildDate" json:"BuildDate,omitempty"`
	GitCommit    string `protobuf:"bytes,3,opt,name=GitCommit" json:"GitCommit,omitempty"`
	GitTag       string `protobuf:"bytes,4,opt,name=GitTag" json:"GitTag,omitempty"`
	GitTreeState string `protobuf:"bytes,5,opt,name=GitTreeState" json:"GitTreeState,omitempty"`
	GoVersion    string `protobuf:"bytes,6,opt,name=GoVersion" json:"GoVersion,omitempty"`
	Compiler     string `protobuf:"bytes,7,opt,name=Compiler" json:"Compiler,omitempty"`
	Platform     string `protobuf:"bytes,8,opt,name=Platform" json:"Platform,omitempty"`
}

func (m *VersionMessage) Reset()                    { *m = VersionMessage{} }
func (m *VersionMessage) String() string            { return proto.CompactTextString(m) }
func (*VersionMessage) ProtoMessage()               {}
func (*VersionMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VersionMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionMessage) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *VersionMessage) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionMessage) GetGitTag() string {
	if m != nil {
		return m.GitTag
	}
	return ""
}

func (m *VersionMessage) GetGitTreeState() string {
	if m != nil {
		return m.GitTreeState
	}
	return ""
}

func (m *VersionMessage) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *VersionMessage) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *VersionMessage) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionMessage)(nil), "version.VersionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionService service

type VersionServiceClient interface {
	// Version returns version information of the API server
	Version(ctx context.Context, in *VersionMessage, opts ...grpc.CallOption) (*VersionMessage, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Version(ctx context.Context, in *VersionMessage, opts ...grpc.CallOption) (*VersionMessage, error) {
	out := new(VersionMessage)
	err := grpc.Invoke(ctx, "/version.VersionService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionService service

type VersionServiceServer interface {
	// Version returns version information of the API server
	Version(context.Context, *VersionMessage) (*VersionMessage, error)
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/version.VersionService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Version(ctx, req.(*VersionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "version.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VersionService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "version.proto",
}

func init() { proto.RegisterFile("version.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4b, 0x2d, 0x2a,
	0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0x64, 0xd2,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12,
	0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xca, 0x94, 0x7e, 0x30, 0x72, 0xf1, 0x85, 0x41, 0x54, 0xfa,
	0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x49, 0x70, 0xb1, 0x43, 0x45, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x19, 0x2e, 0x4e, 0xa7, 0xd2, 0xcc, 0x9c, 0x14, 0x97, 0xc4,
	0x92, 0x54, 0x09, 0x26, 0xb0, 0x1c, 0x42, 0x00, 0x24, 0xeb, 0x9e, 0x59, 0xe2, 0x9c, 0x9f, 0x9b,
	0x9b, 0x59, 0x22, 0xc1, 0x0c, 0x91, 0x85, 0x0b, 0x08, 0x89, 0x71, 0xb1, 0xb9, 0x67, 0x96, 0x84,
	0x24, 0xa6, 0x4b, 0xb0, 0x80, 0xa5, 0xa0, 0x3c, 0x21, 0x25, 0x2e, 0x1e, 0x10, 0xab, 0x28, 0x35,
	0x35, 0xb8, 0x04, 0x64, 0x2c, 0x2b, 0x58, 0x16, 0x45, 0x0c, 0x6c, 0x72, 0x3e, 0xcc, 0x4d, 0x6c,
	0x50, 0x93, 0x61, 0x02, 0x42, 0x52, 0x5c, 0x1c, 0xce, 0xf9, 0xb9, 0x05, 0x99, 0x39, 0xa9, 0x45,
	0x12, 0xec, 0x60, 0x49, 0x38, 0x1f, 0x24, 0x17, 0x90, 0x93, 0x58, 0x92, 0x96, 0x5f, 0x94, 0x2b,
	0xc1, 0x01, 0x91, 0x83, 0xf1, 0x8d, 0xe2, 0xe1, 0x3e, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0x15, 0xf2, 0x85, 0xfb, 0x5c, 0x48, 0x5c, 0x0f, 0x16, 0x9c, 0xa8, 0xa1, 0x23, 0x85, 0x4b, 0x42,
	0x49, 0xa0, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0x5c, 0x42, 0x1c, 0xfa, 0x50, 0x05, 0x4e, 0x9c, 0x51,
	0xb0, 0x48, 0x48, 0x62, 0x03, 0x87, 0xb6, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x23, 0xf9, 0xf9,
	0xeb, 0xa5, 0x01, 0x00, 0x00,
}
